<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Brenda Thng</title>
    <link>http://brendathng.com/</link>
    <description>Recent content on Brenda Thng</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 27 Apr 2018 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="http://brendathng.com/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>First Post Brenda</title>
      <link>http://brendathng.com/posts/first-post-brenda/</link>
      <pubDate>Fri, 27 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>http://brendathng.com/posts/first-post-brenda/</guid>
      <description>Hello Hugo world! No more excuses for having no blog or documentation now! help: https://github.com/calintat/minimal/blob/master/exampleSite/content/post/goisforlovers.md https://opensource.com/article/18/3/start-blog-30-minutes-hugo https://gohugo.io/getting-started/usage/</description>
    </item>
    
    <item>
      <title>(Hu)go Template Primer</title>
      <link>http://brendathng.com/test-post/</link>
      <pubDate>Wed, 02 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>http://brendathng.com/test-post/</guid>
      <description>Hugo uses the excellent go html/template library for its template engine. It is an extremely lightweight engine that provides a very small amount of logic. In our experience that it is just the right amount of logic to be able to create a good static website. If you have used other template systems from different languages or frameworks you will find a lot of similarities in go templates.
This document is a brief primer on using go templates.</description>
    </item>
    
  </channel>
</rss>